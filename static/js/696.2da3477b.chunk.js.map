{"version":3,"file":"static/js/696.2da3477b.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://social-network/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","webpack://social-network/./src/components/Dialogs/DialogItems/DialogItems.module.css?30be","components/Dialogs/DialogItems/DialogItems.tsx","webpack://social-network/./src/components/Dialogs/DialogsForm/DialogsForm.module.css?b378","components/Dialogs/DialogsForm/DialogsForm.tsx","components/Dialogs/DialogsContainer/DialogsContainer.tsx","redux/actions/dialogsAction.ts","components/Dialogs/Dialogs.tsx","webpack://social-network/./src/components/common/FormsControls/FormsControls.module.css?eb50","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators/index.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Dialogs_root__ZBxGL\",\"messages\":\"Dialogs_messages__lkJAj\",\"messages__items\":\"Dialogs_messages__items__pitjD\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Message_root__Qd2uM\",\"message\":\"Message_message__Ic1yz\"};","import React from 'react';\n\nimport styles from './Message.module.css';\n\ntype PropsType = {\n    id: number;\n    message: string;\n};\n\nexport const MessageItem = (props: PropsType) => {\n    const { message } = props;\n\n    return (\n        <div className={styles.root}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"DialogItems_root__zDccm\",\"title\":\"DialogItems_title__XjrMs\",\"item\":\"DialogItems_item__UFFv8\",\"item__image\":\"DialogItems_item__image__D53KK\",\"item__avatar\":\"DialogItems_item__avatar__2AYrr\",\"userAndMessage\":\"DialogItems_userAndMessage__+0Ro3\",\"item__userName\":\"DialogItems_item__userName__Nz0j0\",\"userMessage\":\"DialogItems_userMessage__LV+Ef\",\"item__link\":\"DialogItems_item__link__Ofv-0\",\"item__link_active\":\"DialogItems_item__link_active__t8at9\"};","import {NavLink} from 'react-router-dom';\n\nimport styles from './DialogItems.module.css'\nimport {UserType} from '../../../types';\n\ntype PropsType = {\n    id: number\n    dialog: UserType\n}\n\nexport const DialogItems = (props: PropsType) => {\n    const {id, dialog} = props\n\n    let path = `/dialogs/${id}`\n\n    return (\n        <div className={styles.root}>\n            <NavLink key={dialog.id} to={path}>\n                <li className={styles.item}>\n                    <div className={styles.item__image}>\n                        <img className={styles.item__avatar} src={dialog.avatar} alt=\"contact-avatar\"/>\n                    </div>\n                    <div className={styles.userAndMessage}>\n                        <div className={styles.item__userName}>\n                            {`${dialog.userFirstName} ${dialog.userLastName}`}\n                        </div>\n                        <div className={styles.userMessage}>\n                            'Sed diam nonummy nibh euismod tincidunt ut laoreet dolore'\n                        </div>\n                    </div>\n                </li>\n            </NavLink>\n        </div>\n    )\n}\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"DialogsForm_root__VoJhg\",\"textareaButtonBlock\":\"DialogsForm_textareaButtonBlock__Y45Lw\",\"textarea\":\"DialogsForm_textarea__NQgS4\",\"button\":\"DialogsForm_button__KLuPq\"};","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\n\nimport styles from './DialogsForm.module.css'\nimport {Textarea} from '../../common/FormsControls';\nimport {maxLengthCreator, required} from '../../../utils/validators';\n\nexport type FormDataType = {\n    newMessageBody: string\n}\n\nconst maxLengthText = maxLengthCreator(50)\n\nexport const DialogsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <div className={styles.root}>\n            <form onSubmit={props.handleSubmit}>\n                <div className={styles.textareaButtonBlock}>\n                    <Field component={Textarea}\n                           name=\"newMessageBody\"\n                           placeholder=\"Enter your Message\"\n                           validate={[required, maxLengthText]}\n                           className={styles.textarea}\n                    />\n                    <button className={styles.button}>Send</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport const DialogsFormRedux = reduxForm<FormDataType>({form: 'dialogsForm'})(DialogsForm)\n\n\n\n","import React from 'react';\nimport {compose} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {addMessageAC} from '../../../redux/actions/dialogsAction';\nimport {Dialogs} from '../Dialogs';\nimport {AppStateType} from '../../../redux/redux-store';\nimport {InitialStateType} from '../../../redux/reducers/dialogsReducer';\nimport {withAuthRedirectComponent} from '../../../hoc/withAuthRedirect';\nimport {withRouter} from 'react-router-dom';\n\ntype MapStateToPropsType = {\n    dialogsPage : InitialStateType\n}\n\ntype MapDispatchToProps = {\n    sendMessage: (newMessageBody: string) => void\n}\n\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToProps\n\nconst mapStateToProps = (state : AppStateType): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        sendMessage: addMessageAC,\n    }),\n    withRouter,\n    withAuthRedirectComponent\n)(Dialogs)\n\n","import {MESSAGES_ADD} from './actionTypes';\n\nexport type DialogsActionType = ReturnType<typeof addMessageAC>\n\nexport const addMessageAC = (newMessageBody: string) => ({\n    type: MESSAGES_ADD,\n    payload: {\n        newMessageBody\n    }\n} as const)\n","import React from 'react';\n\nimport styles from './Dialogs.module.css'\n\nimport {MessageItem} from './Message';\nimport {DialogItems} from './DialogItems';\nimport {DialogsFormRedux, FormDataType} from './DialogsForm';\nimport {DialogsPropsType} from './DialogsContainer/DialogsContainer';\nimport {useWindowWidth} from '../../hooks';\n\n\nexport const Dialogs = (props: DialogsPropsType) => {\n    const {sendMessage} = props\n    const {dialogs, messages} = props.dialogsPage\n\n    const isDesktop = useWindowWidth(1200)\n\n    const addNewMessage = (values: FormDataType) => {\n       sendMessage(values.newMessageBody)\n    }\n\n    const dialogsElements = dialogs.map(dialog => {\n        return (\n            <DialogItems key={dialog.id} id={dialog.id} dialog={dialog}/>\n        )\n    })\n\n    const messagesElements = messages.map(message => {\n        return (\n            <MessageItem key={message.id} id={message.id} message={message.message}/>\n        )\n    })\n\n    return (\n        <div className={styles.root}>\n            {!isDesktop && <div className={styles.dialogs__items}>{dialogsElements}</div>}\n            <div className={styles.messages}>\n                <div className={styles.messages__items}>{messagesElements}</div>\n                <DialogsFormRedux onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__C25l1\",\"error\":\"FormsControls_error__yTVwP\",\"errorMessage\":\"FormsControls_errorMessage__FPdre\",\"blink1\":\"FormsControls_blink1__yCpQl\",\"checkboxLabel\":\"FormsControls_checkboxLabel__uVtFP\",\"createFieldRoot\":\"FormsControls_createFieldRoot__713+W\",\"createFieldText\":\"FormsControls_createFieldText__+EwTk\"};","import React, {DetailedHTMLProps, TextareaHTMLAttributes} from 'react';\nimport {Field, WrappedFieldMetaProps} from 'redux-form';\n\nimport styles from './FormsControls.module.css'\n\nimport {FieldValidatorType} from '../../../utils/validators';\n\ntype DefaultInputPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\ntype FormsControlType = {\n    input: DefaultInputPropsType\n    meta: WrappedFieldMetaProps\n    FormType: string\n}\n\nexport const FormsControls: React.FC<FormsControlType> = ({\n                                                              input,\n                                                              meta,\n                                                              FormType,\n                                                              ...props\n                                                          }) => {\n    const error = meta.touched && meta.error\n    const finalInputName = `${styles.formControl} ${error ? styles.error : ''}`\n\n    return (\n        <div className={finalInputName}>\n            <FormType {...input} {...props}/>\n            {error && <div className={styles.errorMessage}>{meta.error}</div>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<FormsControlType> = ({...props}) => {\n    return <FormsControls {...props} FormType=\"textarea\"/>\n}\n\nexport const Input: React.FC<FormsControlType> = ({...props}) => {\n    return <FormsControls {...props} FormType=\"input\"/>\n}\n\nexport function createField<FormKeyType extends string>(\n    placeholder: string | undefined,\n    name: FormKeyType,\n    validators: Array<FieldValidatorType>,\n    component: React.FC<FormsControlType>,\n    props?: {\n        className?: string,\n        type?: string\n    },\n    text = '',\n) {\n    return (\n        <div className={styles.createFieldRoot}>\n            <Field\n                placeholder={placeholder}\n                name={name}\n                validate={validators}\n                component={component}\n                className={props?.className}\n                {...props}\n            />{' '}\n            <label className={styles.createFieldText}> {text} </label>\n        </div>\n    );\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>;","import React, {ComponentType} from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\n\nimport {AppStateType} from '../redux/redux-store';\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirectComponent<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: MapStateToPropsType) => {\n        const {isAuth, ...restProps} = props\n\n        if (!props.isAuth) return <Redirect to={'/login'}/>\n\n        return <Component {...restProps as T}/>\n    }\n\n    const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n}","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    return value ? undefined : 'Field is required';\n}\n\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value: string) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\n\n    return undefined\n}"],"names":["MessageItem","props","message","className","styles","DialogItems","id","dialog","path","to","src","avatar","alt","userFirstName","userLastName","maxLengthText","maxLengthCreator","DialogsFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","compose","connect","state","dialogsPage","sendMessage","newMessageBody","type","MESSAGES_ADD","payload","withRouter","withAuthRedirectComponent","dialogs","messages","isDesktop","useWindowWidth","dialogsElements","map","messagesElements","values","FormsControls","input","meta","FormType","error","touched","finalInputName","Input","createField","validators","text","mapStateToProps","isAuth","auth","Component","restProps","value","undefined","maxLength","length"],"sourceRoot":""}