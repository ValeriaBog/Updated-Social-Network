{"version":3,"file":"static/js/794.a3a89a04.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css?c3a9","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","webpack://social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-network/./src/components/Profile/Posts/Post/Post.module.css?59e2","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/AddPostForm/AddPostForm.tsx","webpack://social-network/./src/components/Profile/Posts/Posts.module.css?138f","components/Profile/Posts/Posts.tsx","components/Profile/Posts/PostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","webpack://social-network/./src/components/common/Textarea/Textarea.module.css?8d89","components/common/Textarea/Textarea.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatus_status__AXP6U\"};","import { ChangeEvent, FC, FocusEvent, useState } from 'react'\nimport { UpdateStatusType } from 'redux/reducers/profileReducer'\nimport s from './ProfileStatus.module.css'\n\ntype PropsType = {\n   status: string\n   updateStatus: UpdateStatusType\n}\n\nexport const ProfileStatus: FC<PropsType> = ({ status, updateStatus }) => {\n   const [editMode, setEditMode] = useState(false)\n   const [statusInput, setStatusInput] = useState(status)\n   console.log(status)\n   const toggleEditMode = () => {\n      if (status !== statusInput) {\n         editMode\n            ? updateStatus(statusInput)\n            : setStatusInput(status)\n      }\n\n      setEditMode(!editMode)\n   }\n\n   const onStatusInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n      setStatusInput(e.currentTarget.value)\n   }\n   const onStatusInputFocus = (e: FocusEvent<HTMLInputElement>) => {\n      e.target.select()\n   }\n\n   return !editMode ? (\n      <div className={s.status}>\n         <span onDoubleClick={toggleEditMode}>{status===null?'Good morning, my friends!':status}</span>\n      </div>\n   ) : (\n      <div className={s.status}>\n         <input value={statusInput}\n                onChange={onStatusInputChange}\n                autoFocus\n                onFocus={onStatusInputFocus}\n                onBlur={toggleEditMode}\n                className={s.textField}\n         />\n      </div>\n   )\n}","// extracted by mini-css-extract-plugin\nexport default {\"row\":\"ProfileInfo_row__lZlEc\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1rZXD\",\"photoInfo\":\"ProfileInfo_photoInfo__s6bNc\",\"nameUser\":\"ProfileInfo_nameUser__5Ga2A\",\"infoUser\":\"ProfileInfo_infoUser__c05J7\",\"textInfo\":\"ProfileInfo_textInfo__rbH-9\"};","import { FC } from 'react'\nimport userPhoto from 'assets/images/user-1.jpg'\nimport { ProfileType } from 'redux/types'\nimport { Preloader } from 'components/common/Preloader/Preloader'\nimport { ProfileStatus } from './ProfileStatus/ProfileStatus'\nimport s from './ProfileInfo.module.css'\nimport { UpdateStatusType } from 'redux/reducers/profileReducer'\n\ntype PropsType = {\n   profile: ProfileType | null\n   status: string\n   updateStatus: UpdateStatusType\n}\nexport const ProfileInfo: FC<PropsType> = ({ profile, status, updateStatus }) => {\n\n    const descriptionUser = (info: string, description: string)=>{\n      return `${info} ${description?description:'in progress...'}`\n    }\n    return !profile ? (\n      <Preloader />\n   ) : (\n      <div className={s.profile}>\n            <img src=\"https://themified.com/friend-finder/images/covers/1.jpg\" alt=\"wallpaper\" />\n             <div className={s.row}>\n                 <ProfileStatus status={status} updateStatus={updateStatus} />\n             </div>\n             <div className={s.descriptionBlock}>\n                 <img src={profile.photos.small ? profile.photos.small : userPhoto}\n                      alt={`Avatar of ${profile.fullName}`}\n                      className={s.photoInfo}/>\n                 <div className={s.nameUser}>{profile.fullName}</div>\n                 <div className={s.infoUser}>\n                     <div className={s.textInfo}>{descriptionUser('About me:', profile.aboutMe)}</div>\n                     <div className={s.textInfo}>{descriptionUser('Job:', profile.lookingForAJobDescription)}</div>\n                     <div className={s.textInfo}>{descriptionUser('Contacts:', profile.contacts.facebook)} </div>\n                 </div>\n             </div>\n\n      </div>\n   )\n}","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__taeMK\"};","import { FC } from 'react'\n\nimport s from './Post.module.css'\n\ntype PropsType = {\n   message: string\n   likesCount?: number\n}\nexport const Post: FC<PropsType> = ({ message, likesCount }) => {\n   return (\n      <div className={s.item}>\n         <img src=\"https://avatars.githubusercontent.com/u/69945902?s=100\"\n              alt=\"avatar\" />\n         {message}\n         <div>\n            <span>like </span><span>{likesCount}</span>\n         </div>\n      </div>\n   )\n}","import { Field, reduxForm } from 'redux-form'\nimport { maxLength, minLength, requiredField } from 'utils/validators'\nimport { Textarea } from 'components/common/Textarea/Textarea'\n\nconst maxLength300 = maxLength(300)\nconst minLength5 = minLength(5)\n\nexport const AddPostReduxForm = reduxForm<AddPostFormData>({\n   form: 'ProfileAddPostForm',\n})(({ handleSubmit, invalid }) => {\n   return (\n      <form onSubmit={handleSubmit}>\n         <Field component={Textarea}\n                validate={[requiredField, minLength5, maxLength300]}\n                name=\"newPostText\"\n                placeholder=\"Post message\"\n         />\n         <div>\n            <button disabled={invalid}>Add post</button>\n         </div>\n      </form>\n   )\n})\n\n// TYPES\nexport type AddPostFormData = {\n   newPostText: string\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"Posts_postsBlock__m036r\",\"posts\":\"Posts_posts__UMYqF\"};","import { FC, memo } from 'react'\n\nimport { PostsPropsType } from './PostsContainer'\nimport { Post } from './Post/Post'\nimport { AddPostFormData, AddPostReduxForm } from 'components/Profile/Posts/AddPostForm/AddPostForm'\n\nimport s from './Posts.module.css'\n\n\nexport const Posts: FC<PostsPropsType> = memo(({ posts, addPost }) => {\n   const addNewPost = (formData: AddPostFormData) => {\n      addPost(formData.newPostText)\n   }\n\n   const postsMap = posts\n      .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />)\n\n   return (\n      <div className={s.postsBlock}>\n         <h3>My posts</h3>\n         <AddPostReduxForm onSubmit={addNewPost} />\n         <div className={s.posts}>\n            {postsMap}\n         </div>\n      </div>\n   )\n})","import { ComponentType } from 'react'\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { AppStateType } from 'redux/store'\nimport { profileActions } from 'redux/reducers/profileReducer'\n\nimport { Posts } from './Posts'\n\nconst mapStateToProps = (state: AppStateType) => ({\n   posts: state.profilePage.posts,\n})\n\nconst mapDispatchToProps = {\n   addPost: profileActions.addPost\n}\n\nexport const PostsContainer = compose<ComponentType>(\n   connect(mapStateToProps, mapDispatchToProps),\n)(Posts)\n\n\n// TYPES\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\ntype MapDispatchPropsType = typeof mapDispatchToProps\n\nexport type PostsPropsType = MapStatePropsType & MapDispatchPropsType","import { FC } from 'react'\n\n// import s from './Profile.module.css'\n\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo'\nimport { PostsContainer } from './Posts/PostsContainer'\nimport { ProfilePropsType } from './ProfileContainer'\n\n\nexport const Profile: FC<ProfilePropsType> = ({ profile, status, updateStatus }) => {\n   return (\n      <div>\n         <ProfileInfo profile={profile} status={status} updateStatus={updateStatus} />\n         <PostsContainer />\n      </div>\n   )\n}","import { Component, ComponentType } from 'react'\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\n\nimport { AppStateType } from 'redux/store'\nimport { profileActions, profileThunks } from 'redux/reducers/profileReducer'\n\nimport { Profile } from './Profile'\n\nconst mapStateToProps = (state: AppStateType) => ({\n   profile: state.profilePage.profile,\n   status: state.profilePage.status,\n   authorizedUserId: state.auth.id,\n   isAuth: state.auth.isAuth,\n})\n\nconst mapDispatchToProps = {\n   ...profileActions,\n   ...profileThunks,\n}\n\nconst ProfileContainer = compose<ComponentType>(\n   connect(mapStateToProps, mapDispatchToProps),\n   withRouter,\n)(class extends Component<PropsType> {\n   componentDidMount() {\n      const { getUserProfile, match, getStatus, authorizedUserId, history } = this.props\n      let userId = Number(match.params.userId)\n\n      if (!userId && authorizedUserId) {\n         userId = authorizedUserId\n      } else if (!userId && !authorizedUserId) {\n         history.push('/login')\n      }\n\n      getUserProfile(userId)\n      getStatus(userId)\n   }\n\n   render() {\n      return <Profile {...this.props} />\n   }\n})\n\nexport default ProfileContainer\n\n// TYPES\ntype PathParamsType = {\n   userId: string\n}\n\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\ntype MapDispatchPropsType = typeof mapDispatchToProps\n\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType\n\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"Textarea_formControl__8prTr\",\"error\":\"Textarea_error__ntugN\"};","import { FC } from 'react'\nimport { WrappedFieldProps } from 'redux-form/lib/Field'\n\nimport cls from './Textarea.module.css'\n\nexport const Textarea: FC<WrappedFieldProps> = ({ input, meta, ...rest }) => {\n   const hasError = !meta.pristine && meta.error\n\n   const textareaStyles = cls.formControl + (hasError ? ' ' + cls.error : '')\n\n   return (\n      <div className={textareaStyles}>\n         <textarea {...input} {...rest} />\n         {hasError && <span>{meta.error}</span>}\n      </div>\n   )\n}"],"names":["ProfileStatus","status","updateStatus","useState","editMode","setEditMode","statusInput","setStatusInput","console","log","toggleEditMode","className","s","value","onChange","e","currentTarget","autoFocus","onFocus","target","select","onBlur","onDoubleClick","ProfileInfo","profile","descriptionUser","info","description","src","alt","photos","small","userPhoto","fullName","aboutMe","lookingForAJobDescription","contacts","facebook","Preloader","Post","message","likesCount","maxLength300","maxLength","minLength5","minLength","AddPostReduxForm","reduxForm","form","handleSubmit","invalid","onSubmit","Field","component","Textarea","validate","requiredField","name","placeholder","disabled","Posts","memo","posts","addPost","postsMap","map","p","id","formData","newPostText","mapDispatchToProps","profileActions","PostsContainer","compose","connect","state","profilePage","Profile","profileThunks","ProfileContainer","authorizedUserId","auth","isAuth","withRouter","this","props","getUserProfile","match","getStatus","history","userId","Number","params","push","Component","input","meta","rest","hasError","pristine","error","textareaStyles","cls"],"sourceRoot":""}