{"version":3,"file":"static/js/776.f9416be1.chunk.js","mappings":"6MACA,EAA2B,2BAA3B,EAAqE,+BAArE,EAA6G,yBAA7G,EAA+I,yBAA/I,EAA+K,uBAA/K,EAAgN,0B,mBCQnMA,EAA4B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACvCC,EAAY,oBAAgBF,GAElC,OACG,gBAAKG,UAAWC,EAAhB,UACG,SAAC,KAAD,CAASC,gBAAiBD,EAAUE,GAAIJ,EAAxC,SAA+CD,OCP3CM,EAAyB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtC,OACG,gBAAKL,UAAWC,EAAhB,SAA4BI,K,uCCLrBC,GAAsBC,EAAAA,EAAAA,GAA8B,CAC9DC,KAAM,wBAD0BD,EAEhC,YAAgC,IAA7BE,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,QACjB,OACG,kBAAMC,SAAUF,EAAhB,WACG,SAACG,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,IACXlB,KAAK,iBACLmB,YAAY,wBAEnB,0BACG,mBAAQC,SAAUR,EAAlB,0B,iCCPNS,EAA6B,SAACC,GAAD,MAA0B,CAC1DC,OAAQD,EAAME,KAAKD,SCUtB,GAL2BE,EAAAA,EAAAA,KACxBC,EAAAA,EAAAA,KALqB,SAACJ,GAAD,MAA0B,CAC/CK,aAAcL,EAAMK,iBAIb,UAAuBC,EAAAA,KDHD,SAAiBC,GAO9C,OAAOH,EAAAA,EAAAA,IAAgDL,EAA4B,GAA5EK,EANwC,SAAC,GAA8B,IAA5BH,EAA2B,EAA3BA,OAAWO,GAAgB,YAC1E,OAAKP,GAEE,SAACM,GAAD,UAAsBC,KAFT,SAAC,KAAD,CAAUzB,GAAG,gBCAZoB,ECJoB,SAAC,GAAmC,IAAjCE,EAAgC,EAAhCA,aAAcI,EAAkB,EAAlBA,YAKvDC,EAAaL,EAAaM,QAC5BC,KAAI,SAAAC,GAAC,OAAI,SAACrC,EAAD,CAAuBC,GAAIoC,EAAEpC,GAAIC,KAAMmC,EAAEnC,MAAxBmC,EAAEpC,OAE1BqC,EAAcT,EAAaU,SAC7BH,KAAI,SAAAI,GAAC,OAAI,SAAChC,EAAD,CAAoBC,QAAS+B,EAAE/B,SAAjB+B,EAAEvC,OAE7B,OACG,iBAAKG,UAAWC,EAAhB,WACG,gBAAKD,UAAWC,EAAhB,SACI6B,KAEJ,iBAAK9B,UAAWC,EAAhB,WACG,yBAAMiC,KACN,SAAC5B,EAAD,CAAqBK,SAjBP,SAAC0B,GACrBR,EAAYQ,EAASC,6B,6ECX3B,EAA8B,8BAA9B,EAAoE,wB,4BCIvDxB,EAAkC,SAAC,GAA8B,IAA5ByB,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,GAAW,YACpEC,GAAYF,EAAKG,UAAYH,EAAKI,MAElCC,EAAiBC,GAAmBJ,EAAW,IAAMI,EAAY,IAEvE,OACG,iBAAK9C,UAAW6C,EAAhB,WACG,uCAAcN,GAAWE,IACxBC,IAAY,0BAAOF,EAAKI","sources":["webpack://social-network/./src/components/Messages/Messages.module.css?8e7e","components/Messages/DialogItem/DialogItem.tsx","components/Messages/Message/Message.tsx","components/Messages/AddMessageForm/AddMessageForm.tsx","hoc/withAuthRedirect.tsx","components/Messages/MessagesContainer.tsx","components/Messages/Messages.tsx","webpack://social-network/./src/components/common/Textarea/Textarea.module.css?8d89","components/common/Textarea/Textarea.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Messages_messages__DNYux\",\"dialogsItems\":\"Messages_dialogsItems__Qop0n\",\"active\":\"Messages_active__63EVF\",\"dialog\":\"Messages_dialog__yDg1M\",\"chat\":\"Messages_chat__kew6M\",\"message\":\"Messages_message__XYbU0\"};","import { FC } from 'react'\nimport { NavLink } from 'react-router-dom'\n\nimport s from '../Messages.module.css'\n\ntype PropsType = {\n   id: number\n   name: string\n}\nexport const DialogItem: FC<PropsType> = ({ id, name }) => {\n   const path: string = `/messages/${id}`\n\n   return (\n      <div className={s.dialog}>\n         <NavLink activeClassName={s.active} to={path}>{name}</NavLink>\n      </div>\n   )\n}","import { FC } from 'react'\n\nimport s from '../Messages.module.css'\n\ntype PropsType = {\n   message: string\n}\nexport const Message: FC<PropsType> = ({ message }) => {\n   return (\n      <div className={s.message}>{message}</div>\n   )\n}","import { Field, reduxForm } from 'redux-form'\nimport { Textarea } from 'components/common/Textarea/Textarea'\nimport { requiredField } from 'utils/validators'\n\nexport const AddMessageReduxForm = reduxForm<AddMessageFormData>({\n   form: 'dialogAddMessageForm',\n})(({ handleSubmit, invalid }) => {\n   return (\n      <form onSubmit={handleSubmit}>\n         <Field component={Textarea}\n                validate={[requiredField]}\n                name=\"newMessageBody\"\n                placeholder=\"Enter your message\"\n         />\n         <div>\n            <button disabled={invalid}>Send</button>\n         </div>\n      </form>\n   )\n})\n\n\n// TYPES\nexport type AddMessageFormData = {\n   newMessageBody: string\n}","import { ComponentType, FC } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport { AppStateType } from 'redux/store'\n\ntype MapStateToProps = ReturnType<typeof mapStateToPropsForRedirect>\n\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\n   isAuth: state.auth.isAuth,\n})\n\nexport const withAuthRedirect = <WCP extends {}>(WrappedComponent: ComponentType<WCP>) => {\n   const RedirectComponent: FC<MapStateToProps> = ({ isAuth, ...restProps }) => {\n      if (!isAuth) return <Redirect to=\"/login\" />\n\n      return <WrappedComponent {...restProps as WCP} />\n   }\n\n   return connect<MapStateToProps, {}, WCP, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent)\n}","import { ComponentType } from 'react'\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { AppStateType } from 'redux/store'\nimport { actions } from 'redux/reducers/messagesReducer'\n\nimport { Messages } from './Messages'\nimport { withAuthRedirect } from 'hoc/withAuthRedirect'\n\nconst mapStateToProps = (state: AppStateType) => ({\n   messagesPage: state.messagesPage,\n})\n\n const MessagesContainer = compose<ComponentType>(\n   connect(mapStateToProps, { ...actions }),\n   withAuthRedirect,\n)(Messages)\n\nexport default MessagesContainer\n\n// TYPES\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\ntype MapDispatchPropsType = typeof actions\n\nexport type MessagesPropsType = MapDispatchPropsType & MapStatePropsType","import { FC } from 'react'\n\nimport s from './Messages.module.css'\n\nimport { MessagesPropsType } from './MessagesContainer'\n\nimport { DialogItem } from './DialogItem/DialogItem'\nimport { Message } from './Message/Message'\nimport { AddMessageFormData, AddMessageReduxForm } from 'components/Messages/AddMessageForm/AddMessageForm'\n\nexport const Messages: FC<MessagesPropsType> = ({ messagesPage, sendMessage }) => {\n   const sendNewMessage = (formData: AddMessageFormData) => {\n      sendMessage(formData.newMessageBody)\n   }\n\n   const dialogsMap = messagesPage.dialogs\n      .map(d => <DialogItem key={d.id} id={d.id} name={d.name} />)\n\n   const messagesMap = messagesPage.messages\n      .map(m => <Message key={m.id} message={m.message} />)\n\n   return (\n      <div className={s.messages}>\n         <div className={s.dialogsItems}>\n            {dialogsMap}\n         </div>\n         <div className={s.chat}>\n            <div>{messagesMap}</div>\n            <AddMessageReduxForm onSubmit={sendNewMessage} />\n         </div>\n      </div>\n   )\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"Textarea_formControl__8prTr\",\"error\":\"Textarea_error__ntugN\"};","import { FC } from 'react'\nimport { WrappedFieldProps } from 'redux-form/lib/Field'\n\nimport cls from './Textarea.module.css'\n\nexport const Textarea: FC<WrappedFieldProps> = ({ input, meta, ...rest }) => {\n   const hasError = !meta.pristine && meta.error\n\n   const textareaStyles = cls.formControl + (hasError ? ' ' + cls.error : '')\n\n   return (\n      <div className={textareaStyles}>\n         <textarea {...input} {...rest} />\n         {hasError && <span>{meta.error}</span>}\n      </div>\n   )\n}"],"names":["DialogItem","id","name","path","className","s","activeClassName","to","Message","message","AddMessageReduxForm","reduxForm","form","handleSubmit","invalid","onSubmit","Field","component","Textarea","validate","requiredField","placeholder","disabled","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","messagesPage","actions","WrappedComponent","restProps","sendMessage","dialogsMap","dialogs","map","d","messagesMap","messages","m","formData","newMessageBody","input","meta","rest","hasError","pristine","error","textareaStyles","cls"],"sourceRoot":""}